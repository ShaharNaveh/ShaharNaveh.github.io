name: Deploy Hugo site to Pages

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    # env:
    #   HUGO_VERSION: v0.128.2
    steps: 
      - name: Get Latest Hugo Version
        if: ${{ env.HUGO_VERSION == '' }}
        run: |
          HUGO_VERSION=$(curl -s https://api.github.com/repos/gohugoio/hugo/releases/latest | jq -r '.tag_name')
          echo "HUGO_VERSION=$HUGO_VERSION" >> $GITHUB_ENV
          echo "Latest Hugo version: ${HUGO_VERSION}"

      - name: Create Hugo Directory 
        id: hugo-dir
        continue-on-error: true
        run: |
          target_dir="${{ env.RUNNER_TOOL_CACHE }}/hugo"
          echo "target_dir=${target_dir}" >> $GITHUB_OUTPUT
          mkdir -p "${target_dir}"
          
      - name: Cache Hugo
        id: hugo-cache
        uses: actions/cache@v4
        with:
          path: ${{ env.RUNNER_TOOL_CACHE }}/hugo/
          key: ${{ runner.os }}-${{ env.HUGO_VERSION }}-hugo

      - name: Install Hugo CLI 
        # if: cache miss
        run: | 
          declare -A oses=( ["Linux"]="linux" ["macOS"]="darwin" ) 
          _os="${oses[$RUNNER_OS]}"
          
          declare -A arches=( ["X64"]="amd64" ["ARM"]="arm64" ["ARM64"]="arm64" )
          _arch="${arches[$RUNNER_ARCH]}"
          output_file="${{ runner.temp }}/hugo.tar.gz"
          wget -O ${output_file} https://github.com/gohugoio/hugo/releases/download/${HUGO_VERSION}/hugo_extended_${HUGO_VERSION#v}_${_os}-${_arch}.tar.gz
          tar xzf ${output_file}
          mv "${{ runner.temp }}/hugo" ${{ steps.hugo-dir.outputs.target_dir }}
          
      - name: Add Hugo to PATH
        run: echo "${{ env.RUNNER_TOOL_CACHE }}/hugo" >> $GITHUB_PATH 
        
      - name: debug 
        run: hugo --version
        
      - name: stop
        run: exit 1
      - name: Setup Hugo
        run: |
          if which hugo >/dev/null 2>&1; then
            echo "Hugo already installed"
          else
            HUGO_VERSION=$(curl -s https://api.github.com/repos/gohugoio/hugo/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")')
            wget https://github.com/gohugoio/hugo/releases/download/${HUGO_VERSION}/hugo_${HUGO_VERSION#v}_Linux-64bit.tar.gz
            tar -xzf hugo_${HUGO_VERSION#v}_Linux-64bit.tar.gz
            sudo mv hugo $(go env GOPATH)/bin/
          fi

      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb 
          
      - name: Install Dart Sass
        run: sudo snap install dart-sass
        
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
        
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
        
      - name: Build with Hugo
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"
            
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
